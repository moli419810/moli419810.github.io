<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Oracle全面详细操作</title>
    <url>/2020/04/21/Oracle%E5%85%A8%E9%9D%A2%E8%AF%A6%E7%BB%86%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span style="font-family:'宋体';">

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start oracleservice MYORACLEDB</span><br><span class="line">sqlplus sys/419810@orcl as sysdba  连接数据库实例</span><br><span class="line">sqlplus 用户名/密码@数据库实例 as sysdba  连接数据库实例</span><br></pre></td></tr></table></figure>

<h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conn 用户名/密码@数据库实例</span><br></pre></td></tr></table></figure>

<h3 id="创建临时表空间"><a href="#创建临时表空间" class="headerlink" title="创建临时表空间"></a>创建临时表空间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create temporary tablespace a_temp </span><br><span class="line">tempfile <span class="string">'F:\Oracle\Space\a\a_temp.dbf'</span> </span><br><span class="line">size 50m </span><br><span class="line">autoextend on  </span><br><span class="line">next 50m maxsize 20480m </span><br><span class="line">extent management <span class="built_in">local</span>;</span><br></pre></td></tr></table></figure>

<h3 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create TABLESPACE a --创建命名空间</span><br><span class="line">DATAFILE<span class="string">'F:\Oracle\Space\a\a.ORA'</span> --选择创建位置</span><br><span class="line">SIZE 50M --尺寸大小为50M</span><br><span class="line">AUTOEXTEND ON NEXT 50M --超过就自动增加50M</span><br><span class="line">MAXSIZE 1G --最大为1G</span><br><span class="line">EXTENT MANAGEMENT LOCAL SEGMENT SPACE MANAGEMENT AUTO;</span><br></pre></td></tr></table></figure>

<h3 id="创建用户授权"><a href="#创建用户授权" class="headerlink" title="创建用户授权"></a>创建用户授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create user USER--创建用户名</span><br><span class="line">identified by USER----密码</span><br><span class="line">default tablespace a--默认表空间</span><br><span class="line">temporary tablespace a_temp; --临时表空间</span><br><span class="line">grant connect,resource,dba to USER;--给用户授权限</span><br></pre></td></tr></table></figure>

<h3 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h3><p>DBA：拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。<br>RESOURCE:拥有Resource权限的用户只可以创建实体，不可以创建数据库结构。<br>CONNECT：拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构。<br>对于普通用户：授予connect, resource权限。<br>对于DBA管理用户：授予connect，resource, dba权限。<br>且系统权限只能由DBA用户授出：sys, system(最开始只能是这两个用户)。普通用户通过授权可以具有与system相同的用户权限，<br>但永远不能达到与sys用户相同的权限，system用户的权限也可以被回收。<br>grant unlimited tablespace to myreport–这个用户可以在其他表空间里随意建表。<br>角色CONNECT、RESOURCE和DBA都不具有UNLIMITED TABLESPACE的系统权限；<br>用户SYS和SYSTEM都具有UNLIMITED TABLESPACE的系统权限。</p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create table userTB(  </span><br><span class="line">  stuid      number(10)   primary key,  </span><br><span class="line">  stuname    varchar2(20) not null,  </span><br><span class="line">  stusex     varchar2(4) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter table userTB modify stuid  number(11);</span><br><span class="line">alter table userTB modify stusex  varchar2(4) ;</span><br></pre></td></tr></table></figure>

<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insert into userTB values(20172002222,<span class="string">'小毛'</span>,<span class="string">'男'</span>);</span><br><span class="line">insert into userTB values(20172004444,<span class="string">'小邓'</span>,<span class="string">'男'</span>);</span><br><span class="line">insert into userTB values(20172006666,<span class="string">'小李'</span>,<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter table userTB add(sex number(30) not null);</span><br></pre></td></tr></table></figure>

<h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter table userTB drop（sex）</span><br></pre></td></tr></table></figure>

<h3 id="删除多个字段"><a href="#删除多个字段" class="headerlink" title="删除多个字段"></a>删除多个字段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter table userTB drop (sex,column_2,...);</span><br></pre></td></tr></table></figure>

<h3 id="某一项为空值赋值"><a href="#某一项为空值赋值" class="headerlink" title="某一项为空值赋值"></a>某一项为空值赋值</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select sum(NVL（sex,-10)) from usertb</span><br></pre></td></tr></table></figure>

<h3 id="替换某个字段的某个字符串"><a href="#替换某个字段的某个字符串" class="headerlink" title="替换某个字段的某个字符串"></a>替换某个字段的某个字符串</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update usertb <span class="built_in">set</span> sex = replace(sex,<span class="string">'0'</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="还原表"><a href="#还原表" class="headerlink" title="还原表"></a>还原表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">导出用户所有的表到D盘：exp moli419810/moli419810 file=F:\oracle\MyOracleDB\MyOracleDBTableSpace\biao.dmp;</span><br><span class="line">导出用户aa中的表dept到D盘:exp aa/1234 file=F:\oracle\MyOracleDB\MyOracleDBTableSpace\dept.dmp tables=(dept);</span><br><span class="line">导出用户aa中的表dept,emp到D盘:exp aa/1234 file=F:\oracle\MyOracleDB\MyOracleDBTableSpace\dept.dmp tables=(dept,emp);</span><br></pre></td></tr></table></figure>

<h3 id="删除原用户"><a href="#删除原用户" class="headerlink" title="删除原用户"></a>删除原用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drop user aa</span><br></pre></td></tr></table></figure>

<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create user aa identified by 1234;（aa:用户名，1234：密码）</span><br><span class="line">grant dba,connect to aa;-----授权</span><br></pre></td></tr></table></figure>

<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--将D盘的biao.dmp导入到新建用户bb中：</span><br><span class="line">imp moli419810/moli419810 file=F:\oracle\MyOracleDB\MyOracleDBTableSpace\biao.dmp full=y</span><br><span class="line">将用户aa中表dept中的数据导入到新建用户的dept表中：</span><br><span class="line">imp bb/1234 file=d:\dept.dmp tables=(dept) ignore=y full=y</span><br></pre></td></tr></table></figure>

</span>




]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>oracle数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库备份还原</title>
    <url>/2020/04/20/Oracle%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h2 style="font-family:'宋体'">oracle备份还原</h2>
<p style="font-family:'宋体'">注释：exp 用户名/密码@数据库实例 file=存储位置.dmp</p>
<p style="font-family:'宋体'">CMD备份语句：exp myreport/myreport@orcl file=d:/a.dmp</p>
<p style="font-family:'宋体'">注释：imp 用户名/密码@数据库实例 file=存储位置.dmp full=y </p>
<p style="font-family:'宋体'">CMD还原语句：imp youreport/youreport@orcl file=d:/a.dmp</p>
<p style="font-family:'宋体'">如果还原时候，有部分表一样则会报错，可在还原语句后加上ignore=y </p>
<h2 style="font-family:'宋体'">oracle导出库关于full=y命令</h2>
<p style="font-family:'宋体'">1.如果加上“full=y”，将整个数据库全部导出，但是需要特殊的权限，一般用system用户就足够了，普通用户是不可以的</p>
<p style="font-family:'宋体'">2.不加“full=y”，默认导出连接数据库的用户数据库对象，比如：exp myreport/myreport@orcl file=d:/myreport.dmp，导出myreport用户下的所有数据库对象</p>
<p style="font-family:'宋体'">3.有多个用户，可以使用system来指定导出哪个用户的数据库对象，比如：exp system/密码@orcl file=d:/a.dmp owner=(用户1,用户2),普通用户是不可以指定owner的</p>
<p style="font-family:'宋体'">4.导出一个用户的多张表，比如：exp myreport/myreport@orcl file=d:/myreport.dmp tables=(table1,table2),普通用户是不可以指定owner的</p>
<p style="font-family:'宋体'">5.数据有多个实例的情况，这个要看你“@”后面是什么，如果@orcl，则在orcl实例上进行导出，@ora，则在ora实例上进行导出</p>

]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>oracle数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>VS浏览器兼容</title>
    <url>/2020/04/28/VS%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<span style="font-family:'宋体';">

<p>●<meta http- equ1v="X-UA-Compatible" content=" 1e=edge">兼容性模式设置:<br><font color="orange">X-UA-Compatible</font> 是自从IE8新加的一一个设置，对于IE8以下的浏览器是不识别的<br><font color="orange">content=”IE=8”</font> 告诉E浏览器，1E8/9都会以IE8引擎来染页面<br><font color="orange">content=”IE=Edge”</font>告诉IE浏览器， 1IE8/9 及以后的版本都会以最高版本IE来渲染页面<br><font color="orange">content=”IE=Edge chrome=1”</font>告诉1E使用最新的引擎渲染网页，chrome=1 则可以激活Chrome Fame<br>这里的chrome-1 不是说IE的技术增强了可以模拟Chrome浏览器，而是可以让用户的IE浏览器外观不变，<br>但用户在浏览网页时实际 且使用的是Chrome的内核，并且支持Windows XP及以上系统的IE6/7/8。</p>
<p><img src="http://pic.netbian.com/uploads/allimg/200331/001133-15855846932862.jpg" alt="VS浏览器兼容"></p>
</span>]]></content>
      <categories>
        <category>工作</category>
        <category>VS</category>
      </categories>
      <tags>
        <tag>VS浏览器兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLserver触发器</title>
    <url>/2020/04/26/SQLserver%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[<span style="font-family:'宋体';">

<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>使用触发器有如下优点：</p>
<ol>
<li>自动执行。触发器在对表的数据作了任何修改（比如手工输入或者应用程序的操作）之后立即被激活。</li>
<li>级联更新。触发器可以通过数据库中的相关表进行层叠更改，这比直接把代码写在前台的做法回更安全合理。</li>
<li>强化约束。触发器可以引用其它表中的列，能够实现比CHECK约束更为复杂的约束。</li>
<li>跟踪变化。触发器可以阻止数据库中未经许可的指定更新和变化。</li>
<li>强制业务答逻辑。触发器可用于执行管理任务，并强制影响数据库的复杂业务规则。 </li>
</ol>
<p><img src="http://pic.netbian.com/uploads/allimg/190609/105506-156004890673db.jpg" alt="SQLserver触发器"></p>
<h3 id="创建触发器-insert"><a href="#创建触发器-insert" class="headerlink" title="创建触发器 insert"></a>创建触发器 insert</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">添加一条订单时﹐减少商品表相应的货品记录中的库存</span><br><span class="line">create trigger trigger_order</span><br><span class="line">on ordertb</span><br><span class="line">after insert</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  update shoptb <span class="built_in">set</span> shopnum-=inserted.num</span><br><span class="line">  from shopTB,inserted</span><br><span class="line">  <span class="built_in">where</span> shopTB.shopid=inserted.shopid</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drop  trigger trigger_order</span><br></pre></td></tr></table></figure>

<h3 id="创建触发器-delete"><a href="#创建触发器-delete" class="headerlink" title="创建触发器 delete"></a>创建触发器 delete</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在Goods表建立删除触发器﹐实现Goods表和Orders表的级联删除</span><br><span class="line">create trigger goodsdelete</span><br><span class="line">on goods</span><br><span class="line">after delete</span><br><span class="line">as</span><br><span class="line">delete from orders</span><br><span class="line"><span class="built_in">where</span> goodsname <span class="keyword">in</span></span><br><span class="line">(select name from deleted)</span><br></pre></td></tr></table></figure>

</span>




]]></content>
      <categories>
        <category>工作</category>
        <category>Sqlserver</category>
      </categories>
      <tags>
        <tag>触发器</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLserver存储过程</title>
    <url>/2020/04/27/SQLserver%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<span style="font-family:'宋体';">

<h3 id="什么是存储过程？"><a href="#什么是存储过程？" class="headerlink" title="什么是存储过程？"></a>什么是存储过程？</h3><p>存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。<br>如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。可以用一个命令对象来调用存储过程。</p>
<h3 id="存储过程优点"><a href="#存储过程优点" class="headerlink" title="存储过程优点"></a>存储过程优点</h3><p>1.运行速度：对于很简单的sql，存储过程没有什么优势。对于复杂的业务逻辑，因为在存储过程创建的时候，数据库已经对其进行了一次解析和优化。存储过程一旦执行，在内存中就会保留一份这个存储过程，这样下次再执行同样的存储过程时，可以从内存中直接调用，所以执行速度会比普通sql快。<br>2.减少网络传输：存储过程直接就在数据库服务器上跑，所有的数据访问都在数据库服务器内部进行，不需要传输数据到其它服务器，所以会减少一定的网络传输。但是在存储过程中没有多次数据交互，那么实际上网络传输量和直接sql是一样的。而且我们的应用服务器通常与数据库是在同一内网，大数据的访问的瓶颈会是硬盘的速度，而不是网速。<br>3.可维护性：的存储过程有些时候比程序更容易维护，这是因为可以实时更新DB端的存储过程。  有些bug，直接改存储过程里的业务逻辑，就搞定了。<br>5.可扩展性：应用程序和数据库操作分开，独立进行，而不是相互在一起。方便以后的扩展和DBA维护优化<br><img src="http://pic.netbian.com/uploads/allimg/200424/004838-15876605183b78.jpg" alt="SQLserver存储过程"></p>
<h3 id="存储过程实例"><a href="#存储过程实例" class="headerlink" title="存储过程实例"></a>存储过程实例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use <span class="built_in">test</span></span><br><span class="line">go</span><br><span class="line"><span class="keyword">if</span>(exists(select * from sys.sysobjects <span class="built_in">where</span> name=<span class="string">'proctest'</span>))</span><br><span class="line">drop proc proctest</span><br><span class="line">go</span><br><span class="line">create proc proctest</span><br><span class="line">@stuname nvarchar(20),@stuid int</span><br><span class="line">as</span><br><span class="line">begin tran</span><br><span class="line">update usertb <span class="built_in">set</span>  stuname=@stuname <span class="built_in">where</span> stuid=@stuid</span><br><span class="line"><span class="keyword">if</span>  @@ROWCOUNT=0</span><br><span class="line">begin</span><br><span class="line"><span class="built_in">print</span> <span class="string">'失败进行回滚'</span> </span><br><span class="line">rollback tran</span><br><span class="line">end</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">begin</span><br><span class="line"><span class="built_in">print</span> <span class="string">'执行成功'</span> </span><br><span class="line">commit tran</span><br><span class="line">end</span><br></pre></td></tr></table></figure>


<h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> proctest <span class="string">'参数1'</span>,<span class="string">'参数2'</span></span><br></pre></td></tr></table></figure>
</span>








]]></content>
      <categories>
        <category>工作</category>
        <category>Sqlserver</category>
      </categories>
      <tags>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title>VS参数修饰符拓展</title>
    <url>/2020/04/28/VS%E7%9F%A5%E8%AF%86%E9%9B%86%E5%90%88%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<span style="font-family:'宋体';">

<h3 id="VS参数修饰符种类"><a href="#VS参数修饰符种类" class="headerlink" title="VS参数修饰符种类"></a>VS参数修饰符种类</h3><p>1.无修饰符：如果一个参数没有用参数修饰符标记，则认为他将按值传递，这将意味着被调用的方法收到原始数据的一份副本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public Form2()</span><br><span class="line">      &#123;</span><br><span class="line">          string message = <span class="string">"你好吗？"</span>;</span><br><span class="line">          SendMessage(message);</span><br><span class="line">          MessageBox.Show(message);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public void SendMessage(string message) &#123;</span><br><span class="line">          message = <span class="string">"不错哦!"</span>;</span><br><span class="line">          MessageBox.Show(message);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>2.out: 输出参数由被调用的方法赋值，因此按引用传递，如果被调用的方法没有给输出参数默值，就会出现编译错误错。out 最大的用途就是调用者只使用一次方法就能获得多个返回值。(在C#7.0中要实现一次方法的调用就能获得多个返回值，建议使用元组)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public Form2()</span><br><span class="line">        &#123;</span><br><span class="line">            string message = <span class="string">"你好吗？"</span>;</span><br><span class="line">            SendMessage(out message);</span><br><span class="line">            MessageBox.Show(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void SendMessage(out string message) &#123;</span><br><span class="line">            message = <span class="string">"不错哦!"</span>;</span><br><span class="line">            MessageBox.Show(message);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public Form2()</span><br><span class="line">       &#123;</span><br><span class="line">           string res = SendMessage(999999,out string wantPrice);</span><br><span class="line">           MessageBox.Show(res);</span><br><span class="line">           MessageBox.Show(wantPrice);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public string SendMessage(int price,out string wantPrice) &#123;</span><br><span class="line">            wantPrice = <span class="string">"愿意出价"</span>+price;</span><br><span class="line">            <span class="built_in">return</span> <span class="string">"张三想买这套房"</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>3.ref: (调用者赋初始值)， 并且可以由被调用的方法可选的重新赋值 (数据是按引用传递的)。如果被调用的方法未能给ref参数赋值，也不会有编译器错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public Form2()</span><br><span class="line">        &#123;</span><br><span class="line">            string message = <span class="string">"你好吗？"</span>;</span><br><span class="line">            SendMessage(ref message);</span><br><span class="line">            MessageBox.Show(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void SendMessage(ref string message) &#123;</span><br><span class="line">            MessageBox.Show(message);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>4.params(了解即可): 这个参数修饰符允许将一组可变的数量的参数作为单独的逻辑参数进行传递，方法只能有一个parems修饰符，而且必须是方法的最后一个参数</p>
<h3 id="out和ref的区别"><a href="#out和ref的区别" class="headerlink" title="out和ref的区别"></a>out和ref的区别</h3><p><font color="orange">out</font>修饰的参数必须再方法内修改，<font color="orange">ref</font>可以修改也可以不修改<br><font color="orange">out</font>修饰参数时候，参数是局部变量，可以不用赋值，因为out一定会对其进行赋值；<br><font color="orange">ref</font>修饰参数时候，参数必须有初始值才能调用；</p>
</span>
![VS参数修饰符拓展](http://pic.netbian.com/uploads/allimg/200401/114501-158571270169a9.jpg)

]]></content>
      <categories>
        <category>工作</category>
        <category>VS</category>
      </categories>
      <tags>
        <tag>VS参数修饰符拓展</tag>
      </tags>
  </entry>
  <entry>
    <title>VS集合&amp;字典</title>
    <url>/2020/04/28/VS%E9%9B%86%E5%90%88&amp;%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<span style="font-family:'宋体';">

<h2 id="ArrayList的使用"><a href="#ArrayList的使用" class="headerlink" title="ArrayList的使用"></a>ArrayList的使用</h2><p>.NET Framework提供的用于数据存储和检索的专用类<br>命名空间System.Collection下的一部分</p>
<h2 id="ArrayList的优势"><a href="#ArrayList的优势" class="headerlink" title="ArrayList的优势"></a>ArrayList的优势</h2><p>大小按照其存储数据来动态扩充和收缩的<br>声明ArrayList时不需要指定长度<br>方便数据的添加、插入、移除    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArrayList item &#x3D;new ArrayList();</span><br><span class="line">&#x2F;&#x2F;将数据新增到集合结尾</span><br><span class="line">item.Add(&quot;abc&quot;);</span><br><span class="line">&#x2F;&#x2F;修改指定索引处的数据</span><br><span class="line">item[2]&#x3D;123;</span><br><span class="line">&#x2F;&#x2F;移除指定索引的数据</span><br><span class="line">item.RemoveAt(0);</span><br><span class="line">&#x2F;&#x2F;在指定索引处插入数据</span><br><span class="line">item.Insert(0,&quot;111&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="ArrayList的劣势"><a href="#ArrayList的劣势" class="headerlink" title="ArrayList的劣势"></a>ArrayList的劣势</h2><p>存储数据时使用的时<font color="orange">object</font>类型存储的<br>不是类型安全的，使用很可能出现类型不匹配的错误<br>就算插入的时同一类型的数据，但在使用的时候，我们也需要转换为原类型处理 (int)<br>存储存在的装箱和拆箱才操作，导致性能低下（引用→值类型为拆箱）性能损耗</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型，限制集合只能存储单一类型数据，C#2.0后出现</p>
<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>List集合与ArrayList由于都继承相同的接口，故使用与ArrayList相似<br>声明List集合时，需要同时为其声明List集合内部的对象类型<br>示例：List<int> Person=new List<int>();<br>List<int> item=new List<int>{};</int></int></int></int></p>
<h2 id="字典Dictionary声明"><a href="#字典Dictionary声明" class="headerlink" title="字典Dictionary声明"></a>字典Dictionary声明</h2><p>在声明Dictionary字典时，需要同时为其声明Dictionary字典内的键与值的类型<br>键必须在设置的时候是唯一的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dictionary&lt;int ,string &gt; dicitem&#x3D;new Dictionary&lt;int ,string &gt;();</span><br><span class="line">Dictionary&lt;int ,string &gt; dicitem&#x3D;new Dictionary&lt;int ,string &gt;&#123;&#123;1,&quot;a&quot;&#125;,&#123;2,&quot;b&quot;&#125;,&#123;3,&quot;c&quot;&#125;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="获取索引的值"><a href="#获取索引的值" class="headerlink" title="获取索引的值"></a>获取索引的值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string value&#x3D;dicitem[1];</span><br></pre></td></tr></table></figure>

</span>
![VS集合&字典](http://pic.netbian.com/uploads/allimg/200331/003551-158558615102aa.jpg)

]]></content>
      <categories>
        <category>工作</category>
        <category>VS</category>
      </categories>
      <tags>
        <tag>VS集合&amp;字典</tag>
      </tags>
  </entry>
  <entry>
    <title>VS类和对象</title>
    <url>/2020/04/28/VS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<span style="font-family:'宋体';">

<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>面向对象是更大的封装注重分工 强调（谁）<br>面向过程注重步骤和过程不注重分工职责（做）</p>
<p>类是模板。对象根据类这个模板创造出来的<br>类只有一个，而对象可以有多个<br>类中定义了什么方法属性，对象中就有什么方法和属性</p>
<h2 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h2><p>1.类名，最好首字母大写（大驼峰命名法）<br>2.属性，这种事物具有什么样的特征（名词）【名字、年龄、身高】<br>3.方法，这类事物具有什么样的行为（动词）【听歌、睡觉、运动】</p>
<h2 id="类和对象的使用"><a href="#类和对象的使用" class="headerlink" title="类和对象的使用"></a>类和对象的使用</h2><h3 id="声明类"><a href="#声明类" class="headerlink" title="声明类"></a>声明类</h3><p>public class Person{</p>
<h4 id="声明属性"><a href="#声明属性" class="headerlink" title="声明属性"></a>声明属性</h4><p>如果属性具有get,说明可以获取该属性的值。<br>如果属性具有set,说明可以向该属性设置值。<br>public string Name {get;set}<br>public string Age {get;set}<br>public string Height {get;set}</p>
<p>public void Listen(){<br>MessageBox.show(name+”再听歌”)<br>}<br>public void Sleep(){<br>MessageBox.show(name+”再睡觉”)<br>}</p>
<p>public static a(){</p>
<p>}<br>}</p>
<h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><p>Person zhangsan = new Person(){<br>Name=”张三”;<br>};<br>zhangsan.Age=18;<br>zhangsan.Listen();<br>Person.a();</p>
<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>public:公有，所有类都可以访问<br>private：私有，当前类内部可访问<br>protected:受保护，该类和子类内部可访问（继承）<br>internal:内部的，本项目内部可访问<br>protected internal:内部受保护访问，本项目或子类访问</p>
<h2 id="静态方法属性"><a href="#静态方法属性" class="headerlink" title="静态方法属性"></a>静态方法属性</h2><p>静态属性和方法通过 static关键字修饰<br>静态属性和方法通过类型直接获取，非静态通过实例化对象获取<br>一般不使用静态修饰，只有当类型中出现拓展方法时需要使用静态类</p>
</span>

<p><img src="http://pic.netbian.com/uploads/allimg/200410/223806-15865294869845.jpg" alt="VS类和对象"></p>
]]></content>
      <categories>
        <category>工作</category>
        <category>VS</category>
      </categories>
      <tags>
        <tag>VS类和对象</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2020/04/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start-快速启动"><a href="#Quick-Start-快速启动" class="headerlink" title="Quick Start  快速启动"></a>Quick Start  快速启动</h2><h3 id="Create-a-new-post-创建一个新帖子"><a href="#Create-a-new-post-创建一个新帖子" class="headerlink" title="Create a new post 创建一个新帖子"></a>Create a new post 创建一个新帖子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server-运行服务器"><a href="#Run-server-运行服务器" class="headerlink" title="Run server 运行服务器"></a>Run server 运行服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files-生成静态文件"><a href="#Generate-static-files-生成静态文件" class="headerlink" title="Generate static files 生成静态文件"></a>Generate static files 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites-部署到远程站点"><a href="#Deploy-to-remote-sites-部署到远程站点" class="headerlink" title="Deploy to remote sites 部署到远程站点"></a>Deploy to remote sites 部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
